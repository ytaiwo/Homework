{\rtf1\ansi\ansicpg1252\cocoartf2578
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-Bold;}
{\colortbl;\red255\green255\blue255;\red7\green60\blue82;\red5\green99\blue193;\red251\green0\blue7;
\red4\green41\blue57;}
{\*\expandedcolortbl;;\cssrgb\c0\c30219\c39596;\csgenericrgb\c1961\c38824\c75686;\cssrgb\c100000\c12195\c0;
\cssrgb\c0\c21366\c28831;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\margl1440\margr1440\vieww25400\viewh13400\viewkind0
\deftab720
\pard\tx720\pardeftab720\li720\fi-360\ri0\sl259\slmult1\sa160\partightenfactor0
\ls1\ilvl0
\f0\fs22 \cf0 1.	Show all customers whose last names start with T. Order them by first name from A-Z.\
\ls1\ilvl0
\f1\b \cf2 SELECT first_name,last_name\
FROM customer\
WHERE last_name LIKE 'T%'\
ORDER BY first_name;
\f0\b0 \cf0 \
2.	Show all rentals returned from 5/28/2005 to 6/1/2005\
\ls1\ilvl0
\f1\b \cf2 SELECT rental_id\
FROM rental\
WHERE rental_date BETWEEN '2005-5-28' AND '2005-6-1';
\f0\b0 \cf0 \
3.	How would you determine which movies are rented the most?\
\ls1\ilvl0
\f1\b \cf2 SELECT title, COUNT(rental_id)\
FROM rental\
JOIN inventory\
ON rental.inventory_id = inventory.inventory_id\
JOIN film\
ON inventory.film_id = film.film_id\
GROUP BY film.title\
ORDER BY COUNT(rental_id) DESC;
\f0\b0 \cf0 \
4.	Show how much each customer spent on movies (for all time) . Order them from least to most.\
\ls1\ilvl0
\f1\b \cf2 SELECT first_name, last_name, SUM(amount) AS total_spent\
FROM customer\
JOIN payment\
ON customer.customer_id = payment.customer_id\
GROUP BY first_name,last_name\
ORDER BY SUM(amount);
\f0\b0 \
\ls1\ilvl0\cf0 5.	Which actor was in the most movies in 2006 (based on this dataset)? Be sure to alias the actor name and count as a more descriptive name. Order the results from most to least.\
\ls1\ilvl0
\f1\b \cf2 SELECT first_name,last_name, COUNT(film.film_id) as Movie_appearances\
FROM actor\
JOIN film_actor\
ON actor.actor_id = film_actor.actor_id\
JOIN film\
ON film.film_id = film_actor.film_id\
WHERE release_year = 2006\
GROUP BY first_name,last_name\
ORDER BY COUNT(film.film_id) DESC;
\f0\b0 \cf0 \
6.	Write an explain plan for 4 and 5. Show the queries and explain what is happening in each one. Use the following link to understand how this works {\field{\*\fldinst{HYPERLINK "http://postgresguide.com/performance/explain.html"}}{\fldrslt \cf3 \ul \ulc3 http://postgresguide.com/performance/explain.html}} \
\ls1\ilvl0
\f1\b \cf2 EXPLAIN ANALYZE SELECT first_name,last_name, COUNT(film.film_id) as Movie_appearances\
FROM actor\
JOIN film_actor\
ON actor.actor_id = film_actor.actor_id\
JOIN film\
ON film.film_id = film_actor.film_id\
WHERE release_year = 2006\
GROUP BY first_name,last_name\
ORDER BY COUNT(film.film_id) DESC;
\f0\b0 \cf0 \
\
\ls1\ilvl0
\f1\b \cf4 "Sort  (cost=245.88..246.20 rows=128 width=21) (actual time=32.165..32.207 rows=199 loops=1)"\
"  Sort Key: (count(film.film_id)) DESC"\
"  Sort Method: quicksort  Memory: 40kB"\
"  ->  HashAggregate  (cost=240.12..241.40 rows=128 width=21) (actual time=31.092..31.174 rows=199 loops=1)"\
"        Group Key: actor.first_name, actor.last_name"\
"        Batches: 1  Memory Usage: 64kB"\
"        ->  Hash Join  (cost=85.50..199.15 rows=5462 width=17) (actual time=4.791..21.863 rows=5462 loops=1)"\
"              Hash Cond: (film_actor.film_id = film.film_id)"\
"              ->  Hash Join  (cost=6.50..105.76 rows=5462 width=15) (actual time=4.269..15.309 rows=5462 loops=1)"\
"                    Hash Cond: (film_actor.actor_id = actor.actor_id)"\
"                    ->  Seq Scan on film_actor  (cost=0.00..84.62 rows=5462 width=4) (actual time=0.030..0.976 rows=5462 loops=1)"\
"                    ->  Hash  (cost=4.00..4.00 rows=200 width=17) (actual time=0.153..0.154 rows=200 loops=1)"\
"                          Buckets: 1024  Batches: 1  Memory Usage: 18kB"\
"                          ->  Seq Scan on actor  (cost=0.00..4.00 rows=200 width=17) (actual time=0.029..0.080 rows=200 loops=1)"\
"              ->  Hash  (cost=66.50..66.50 rows=1000 width=4) (actual time=0.485..0.486 rows=1000 loops=1)"\
"                    Buckets: 1024  Batches: 1  Memory Usage: 44kB"\
"                    ->  Seq Scan on film  (cost=0.00..66.50 rows=1000 width=4) (actual time=0.014..0.297 rows=1000 loops=1)"\
"                          Filter: ((release_year)::integer = 2006)"\
"Planning Time: 2.291 ms"\
"Execution Time: 32.477 ms"\
\ls1\ilvl0
\f0\b0 \cf0 \
7.	What is the average rental rate per genre?\
\ls1\ilvl0
\f1\b \cf2 SELECT name, AVG(rental_rate) AS avg_rental_rate\
FROM film\
JOIN film_category\
ON film.film_id = film_category.film_id\
JOIN category\
ON film_category.category_id=category.category_id\
GROUP BY name;
\f0\b0 \cf0 \
8.	How many films were returned late? Early? On time?\
\ls1\ilvl0\cf5 CREATE VIEW Rental_Returns AS \
	SELECT  \
		COUNT(film.film_id) AS Num_of_Films,\
		CASE\
			WHEN DATE_PART('day', return_date - rental_date) < rental_duration THEN 'Returned Early'\
			WHEN DATE_Part('day', return_date - rental_date) = rental_duration THEN 'Returned on Time'\
			ELSE 'Returned Late'\
		END AS Status\
	FROM film\
	JOIN inventory\
	ON film.film_id=inventory.film_id\
	JOIN rental\
	ON inventory.inventory_id = rental.inventory_id\
	GROUP BY Status;\
\
\ls1\ilvl0
\f1\b 7738	"Returned Early"\
1720	"Returned on Time"\
6586	"Returned Late"
\f0\b0 \
\ls1\ilvl0\cf0 9.	What categories are the most rented and what are their total sales?\
\ls1\ilvl0
\f1\b \cf2 CREATE VIEW total_sales_by_cat AS\
SELECT name, SUM(amount)\
FROM category\
JOIN film_category\
ON category.category_id = film_category.category_id\
JOIN inventory\
ON film_category.film_id = inventory.film_id\
JOIN rental\
ON inventory.inventory_id =  rental.inventory_id\
JOIN payment\
ON rental.rental_id = payment.rental_id\
GROUP BY name;
\f0\b0 \cf0 \
10.	Create a view for 8 and a view for 9. Be sure to name them appropriately. \
\ls1\ilvl0\cf2 View for 8 (Rental_Returns):\
\ls1\ilvl0
\f1\b SELECT *\
FROM Rental_Returns
\f0\b0 \
\
View for 9():\
\ls1\ilvl0
\f1\b SELECT *\
FROM total_sales_by_cat;\
\
\ls1\ilvl0
\f0\b0 \cf0 Bonus:\
\pard\pardeftab720\ri0\sl259\slmult1\sa160\partightenfactor0
\cf0 Write a query that shows how many films were rented each month. Group them by category and month. \
}